import requests
import re
import time as Time
import os

#convers to a time in seconds
def toTime(time):
	if '*' in time:
		time = re.split('\*', time)[0].strip()
	if time[0]=="X" or time[0]=="x":
		time=time[1:]
	if re.match(".*:.*",time) == None:
		return float(time)
	return float(re.split(":",time)[0])*60 +float(re.split(":",time)[1])
	
conferenceMap = {59:'Allegheny Mountain',81:'American Southwest',346:'Appalachian (ASC)',125:'Bluegrass Mountain',82:'Capital Athletic',83:'Centennial',84:'City Univ. of New York',85:'College of Illinois/Wisc',86:'Colonial States Athletic',87:'Commonwealth Coast',88:'Empire 8',90:'Great Northeast Athletic',89:'Great South Athletic',91:'Heartland Collegiate',338:'Independent',92:'Iowa Intercollegiate',93:'Landmark',124:'Liberal Arts',94:'Liberty League',95:'Little East',96:'Massachusetts State',130:'Metropolitan Swim',97:'Michigan Intercollegiate',98:'Middle Atlantic',99:'Midwest',100:'MIAC',101:'New England Intercoll.',102:'NESCAC',103:'New England',104:'New Jersey Athletic',105:'North Atlantic',106:'North Coast Athletic',107:'North Eastern Athletic',108:'Northern Athletics',109:'Northwest Conference',110:'Ohio Athletic',111:'Old Dominion Athletic',129:'Pacific Collegiate',112:'Presidents',114:'Skyline',343:'Southern Athletic Associa',115:'Southern California',116:'Southern Collegiate',113:'St. Louis Intercollegiate',117:'State Univ of New York',119:'University Athletic',120:'Upper Midwest Athletic',118:'USA South Athletic',121:'Wisconsin Intercollegiate',25:'ACC (Atlantic Coast)',29:'America East',345:'American Athletic Conf',30:'Atlantic 10',27:'Big 12',31:'Big East',1:'Big Ten',49:'Coastal College (CCSA)',33:'Colonial Athletic Assoc',34:'Conference USA',35:'Horizon League',36:'Independent',37:'Ivy League',38:'Metro Atlantic Athl. Conf',340:'Metropolitan Swimming Con',39:'Mid',41:'Missouri Valley',336:'Mountain Pacific Sports',42:'Mountain West',43:'Northeast Conf',28:'Pac 12',26:'SEC',45:'Sun Belt',46:'The Patriot League',47:'The Summit League',48:'Western Athletic Conf',339:'Appalachian (ASC)',123:'Bluegrass Mountain',341:'California Collegiate',61:'Central Atlantic',64:'East Coast',66:'Great Lakes Intercoll',344:'Great Lakes Valley',337:'Independent',128:'Metropolitan Swimming',71:'Mid',127:'New South Intercollegiate',73:'Northeast Ten',72:'Northern Sun Intercoll',131:'Pacific Collegiate',122:'Pennsylvania State (PSAC)',76:'Rocky Mountain Athletic',79:'Sunshine State'}

def getTopTimes(File,Conference="", Team='radAllTeam', Date='30', Distance='50', Stroke='1', Gender='rbGenderMale',
				BestAll='radBestTimeOnly', Number=100, StartDate='', EndDate='', oldTimes=set()):
	URL = 'http://usaswimming.org/DesktopDefault.aspx?TabId=1969&Alias=Rainbow&Lang=en'
	Cut = '1'
	Division = 1
	if Date.find('DIII')>-1:
		URL = 'http://usaswimming.org/DesktopDefault.aspx?TabId=1989&Alias=Rainbow&Lang=en'
		Cut = '9'
		Division = 3
	elif Date.find('DII')>-1:
		URL = 'http://usaswimming.org/DesktopDefault.aspx?TabId=1984&Alias=Rainbow&Lang=en'
		Cut = '6'
		Division = 2
	RelInd = 'rbIndividual'
	EventType = 'radEventIndividual'
	if Stroke.find('-R')>0:
		RelInd = 'rbRelay'
		EventType = 'radEventRelay'
	session = requests.session()
	if StartDate=='' and EndDate=='':
		r = requests.post(URL)
		place = r.text.find('<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="')+64
		ViewState = r.text[place:r.text.find('"',place)]
		place=r.text.find('<input type="hidden" name="__EVENTVALIDATION" id="__EVENTVALIDATION" value="')+76
		EventValidation = r.text[place:r.text.find('"',place)]
	elif not (StartDate=='' and EndDate==''):
		if Division==1:
			ViewState=''
			EventValidation='/wEdAHLuk5CheoHjX1vBxgJVBqntXm376W5D59MEytxu5frXFVB3BURTQxOauLsd1WU/CL89haboKy9FoTKFyyBX0sZsz04HZEHxNkBl5MgfMzb9VEo4CDchO0xp6QsGUpOGhNxChGjuCFs8kGqXXBJVTr/aWC8IsJcNolTtzCnZu11vTHJLBLjQ4wdExlgXx9HmxuHEe2/Wv6ZhIwoQtORGUFRTLyUaxgPgZLo848YkGgvz8QO74FShQ7U+mj/Z3Hq40lS1+hmCYZbpxLDVPHfsA7PkjG4PcQ8NGwWrN/48iMRNk4GNNmJzAoLF4mbhpEssiTOyjEHjV8UdR79WEISg7+Xh7s7kilyJ+sIknoIFUUlOzNJW+ABMj4qeK0tXWHFqzYEfDzjzs/htDcR35wRv9piYY6Eu+L4Hv1gIEUdcfIUxMHIxG7MxkclXWjI4IyqGOfiW3M5QBYpjY/igozgfK3lVQc6AazE/qTM/VQfTZYyQ0SJy8OFDyzn0IZ3ZwcyvxBjWQVRDWLckFkOE+TrWYgWcyxFJVTDlF0ZhXkOc1L0fxBO3nVETJICCPngsrNmZCVnY9zy7OD8RZCOmMjDv7oGG3FumzupYL6N2KNx1apmcN6dy9XsRXxh+Dy0H3COJV4Qb414+0k90o/tbRZsU4dzO6bc8PYDSBVujWbTOiWxhBsielf5giCjZ5d1CQAlpiJ/zI4ur2oksrimdDprQtwv2yDVT5MeJi/ybj11UPGPguB3zAfX5E5frv8/KiQmhd/7GxkFvyoZNFdE2UNRnmvO0lktiozYBdFDL2qJPfyTIqsfIq8KCa9mn81ox1uNtY7fx3g1KOJ3EEhea8Mw20tM3rgNxRBkhLo0JJAHrcpJMVi2nDvY+l95LkB6WHEGrHWZZR4Fl1k6AwyiLr98rD4P2F32Wwbg0auXwlLNnE66+7Z/byczF3cFQTjNTv1VYqktkHVtt/ujZqRYMHy65bXpV5/jE3OW8hq+OFWZV9J9X7/SSfj3Fx1EAvCK9IFh6G+VsMJV8YU/WMiybgP4nT5SLiCsvqHlNeN1rJIZi6ZTLRTUg/dcfL4ADXw0XAsYUsbo0qKKwdKYXLOhguz9HNCGK+QqPONwZBpY5v2DmXXiWlsql2yysDoWSq8vBgsh3vTqT5qHxnoj1fC21GqgC1dRQviXpjqg/cbzfsF7ivVjL5/0CMq2XFIA+69RTX4wlH+1poWbsTNii5Pn9GyJTPKKyZmf4ZxCahCOt4xlF4F+p287XhZI72Xzks3c971ML0X98W5Pu+ZvpG2EALVI0j6yVnhDGhOasysjLsgmyqeu8WqHko4dl+Z+9R/Mz/vIqo9iXzYvIygd8rgjXB0/P6LA+zxbDantZttYqp4f3/zMT8ssBgtG9RpB6gw0d5OxgvBr4e6hBV2mxXEn7Rv8OC5f6nTreRK9/akU8IVJHEp+wT6YVGwcdgiENraoyC3xESnZGAvTmz1EONRWCa6zXydtMap8oI4KzW0MlWU1mQMNfZZjHBg28yeycXbpj5d+XihQZi0f0ZdNTF2bceKAIZKolwP8PtfU6TQGKILiJumB/ILIjHZvsFi+sfrvNkkYsen/vaGIE2K4rdXHzcX7XRI6uQW3BKj0OeLf7Laiiv/5Rg9ZVMWgqMfUfJvYfcXcTBJMk7iD8ZANwIHD1sCdr/CsiKvkcSVWuHYDAVuHzlMKnGHO1n7KkRqEIcLNDxWRBkYdypZ/dETpxEQPJq1xKZQ6YTe2WrZNYRoCMdlZQdSpOOWRhuCOR2GkBAaCdq8mvLbtPd/J3dfTucS4xgx5IaU/xC7ZPO4fJNZaGTAlF0e2Qhb7QVZ+oH5POb9kal77z15Xqp1YJUsrkbH1Zrv4gF3MQylVLZkJbjlZ3nPr3+tAYIq7ufPIu/J/n132/voauMlW1nGtodCJOr9oh6MhLl8cyyAP6/R2M68o0xGtGtq6N1wI0sy5urJMjiCMq0AT52HjtoEMaQAXUTsotbn1MqbAzmF7Jm1tO9+AhjaXj+OlX5U3OiI6kFcsvBhdBoBdgxNpKQR8neKJii+wPWdYWxgbTIkKDac1HB6oo5LxM3W9Y6+iy9MPoGxASwd9INWtPC0uhBlWxo06/XxZZvTTsOF4e0MdoK8xko/n05i/dGdCicU9VLYCHJNWaS9Td2hijXODohkJcs3oprWGZbUT9RX/DNPXPMCYJGPOlBYCndLSLwW9mSCQ2+exm0wpWzS0G3BdGZKnxcxxrJ5dZQ3V0jimCAPvLlqyh5EWbUOqrgjkVbPaNY7BV4mafArtvkl+8H2GiSO0R3Tzyl1u/p7PWVQEUMhm/QixG2ZniBMlwJDTXmRgKSVqloAKmvbJ0IhFjdpjYMR1UlGgRqxqANPnqco1V5aYSa3fofMk8gM9pfgIgPJu3Y1qr5RQ2+ZsUUR9ECrLqDHDsIGtj8JRNbZSqu6UcjjSH/Tz7NIR1zh6+woUszg=='
		if Division==2:
			ViewState=''
			EventValidation='/wEdAEwQaQ7vIBnQBpJodMdvtke2WZUfao0wZb0Gi64qpnWy8ssERR1tQ+fACxCAc0xOimRebfvpbkPn0wTK3G7l+tcVUHcFRFNDE5q4ux3VZT8Ivz2FpugrL0WhMoXLIFfSxmyknWb5Aza+sdRYAUPIdQhkxukWfofKqxi2bUg7Xf+2MtWQCa4HPpZOGr2rpGIxx6pBFgXzpdSuBPxF3XyYvJjoHkQatwxiKAjVbCUFRdNXHD1sWK3YhWpx5Y+mBtzjI8GgdeC+UELmf8lYDUj2gSjQqtW6j2obUJwQuDdBvOwcaLvmkVUzdRAzGgK0G+bfn4WAp0n9SeEaBmVHfRMSmFnrU+VfoHL7Tnr3KcOGxfBWPPejJQKJwzVakZjnyZavb207+pCRgehOC3eOuAK63ixR/KV88+8mdRsOy9xJZ+sIKGEkcoJ8Ve4yVvZtaHMtX8lGI2xir38UOUoR3fTyjlrurbaFIvjr7kpYZixtx7DCLum3PD2A0gVbo1m0zolsYQbInpX+YIgo2eXdQkAJaYif8yOLq9qJLK4pnQ6a0LcL9sg1U+THiYv8m49dVDxj4Lgd8wH1+ROX67/PyokJoXf+xsZBb8qGTRXRNlDUZ5rztEMgsFLLwQH336NQim53LjuvC6B7dwjZlpe4hFo4FNu31AF4Bou76JCXM6T9G6g88HIkcuoF82Ngg7ihms1lC8Hn+MTc5byGr44VZlX0n1fv9JJ+PcXHUQC8Ir0gWHob5WwwlXxhT9YyLJuA/idPlIuIKy+oeU143WskhmLplMtFNSD91x8vgANfDRcCxhSxujSoorB0phcs6GC7P0c0IYr5Co843BkGljm/YOZdeJaWyqXbLKwOhZKry8GCyHe9OpPmofGeiPV8LbUaqALV1FC+JemOqD9xvN+wXuK9WMvn/QIyrZcUgD7r1FNfjCUf7WmhZuxM2KLk+f0bIlM8orJmZ/hnEJqEI63jGUXgX6nbzteFkjvZfOSzdz3vUwvRf3xbk+75m+kbYQAtUjSPrJWeEMaE5qzKyMuyCbKp67xaoeSjh2X5n71H8zP+8iqj2JfNi8jKB3yuCNcHT8/osD7PFsNqe1m21iqnh/f/MxPyywGC0b1GkHqDDR3k7GC8Gvh7qEFXabFcSftG/w4Ll/qdOt5Er39qRTwhUkcSn7BPphUbBx2CIQ2tqjILfERKdkYC9ObPUQ41FYJrrNfJ20xqnygjgrNbQyVZTWZAw19lmMcGDbzJ7JxdumPl35eKFBmLR/Rl01MXZtx4oAhkqiXA/w+19TpNAYoguIm6YH8gsiMdm+wWL6x+u82SRix6f+9oYgTYrit1cfNxftdEjq5BbcEqPQ54t/stqKK//lGD1lUxaCox9R8m9h9xdxMEkyTuIPxkA3AgcPWwJ2v8KyIq+RxJVa4dgMBW4fOUwqcYc7WfsqRGoQhws0PFZEGRh3Kln90ROnERA8mrXEplDpjpMPsF+i45EhyUsUJc9dycGwx97mX43D3ub8NALeQNR3xAIWl4RQR+W5d5B38+WLPqp1YJUsrkbH1Zrv4gF3MQylVLZkJbjlZ3nPr3+tAYIq7ufPIu/J/n132/voauMlXIA/r9HYzryjTEa0a2ro3XFKlJHeTHUo5vtn+xrNsf9r1aZhjTE0xS7E6zygYqeNI='
		if Division==3:
			ViewState=''
			EventValidation='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'
	RStroke='6'
	if RelInd=='rbRelay':
		RDistance = Distance
	else:
		RDistance = '200'
	DateType = 'rbNamedDateRange'
	SD = ''
	ED = ''
	SDValid = ''
	EDValid = ''
	if StartDate != '' and EndDate != '':
		DateType = 'rbDateRange'
		split = StartDate.split('/')
		if int(split[1]) < 10:
			split[1]='0' + split[1]
		if int(split[0]) < 10:
			split[0] = '0'+split[0]
		SD = split[2]+'-'+split[0]+'-'+split[1]
		split = EndDate.split('/')
		if int(split[1]) < 10:
			split[1] = '0'+split[1]
		if int(split[0]) < 10:
			split[0] = '0'+split[0]
		ED = split[2]+'-'+split[0]+'-'+split[1]
		SDValid = SD+'-00-00-00'
		EDValid = ED+'-00-00-00'
	DateDict = {'17 DI':'42', '17 DII':'43', '17 DIII':'44', '16 DI':'37','16 DII':'38','16 DIII':'39','15 DIII':'35',
				'14 DIII':'31','13 DIII':'27',
				'12 DIII':'22','11 DIII':'8','15 DI':'33','14 DI':'30', '13 DI':'25','12 DI':'20','11 DI':'7',
				'10 DI':'4','09 DI':'5','08 DI':'6','15 DII':'34','14 DII':'29','13 DII':'26','12 DII':'21','11 DII':'9'}
	Date=DateDict[Date]
	revd=dict([reversed(i) for i in DateDict.items()])
	DateDict.update(revd)
	if Stroke=='FR':
		strokeOut='Freestyle'
		Stroke='1'
	elif Stroke=='BK':
		strokeOut='Backstroke'
		Stroke='2'
	elif Stroke=='BR':
		strokeOut='Breastroke'
		Stroke='3'
	elif Stroke=='FL':
		strokeOut='Butterfly'
		Stroke='4'
	elif Stroke=='IM':
		strokeOut='Individual Medley'
		Stroke='5'
	elif Stroke=='FR-R':
		strokeOut='Freestyle Relay'
		Stroke='1'
		RStroke='6'
	elif Stroke=='MED-R':
		strokeOut='Medley Relay'
		Stroke='1'
		RStroke='7'
	if BestAll.find('all')>-1:
		BestAll='radAllTimesForSwimme'
	if BestAll.find('be')>-1:
		BestAll='radBestTimeOnly'
	Gender=Gender.lower()
	if Gender.find('f')>-1:
		Gender='rbGenderFemale'
		genderOut='Women'
	else:
		Gender='rbGenderMale'
		genderOut='Men'
	payload = {
		'ctl00$RadScriptManager1':'ctl00$ctl82$updpnlSearh|ctl00$ctl82$btnSearch',
		'RadScriptManager1_TSM': ';;System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35:en:d28568d3-e53e-4706-928f-3765912b66ca:ea597d4b:b25378d2;Telerik.Web.UI, Version=2013.1.220.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en:3e3b0da6-8c39-4d10-9111-25eaee1f7355:16e4e7cd:ed16cbdc:f7645509:24ee1bba:e330518b:2003d0b8:1e771326:c8618e41:a1a4383a:8674cba1:7c926187:b7778d6c:c08e9f8a:59462f1:a51ee93e;',
		'RadStyleSheetManager1_TSSM': ';Telerik.Web.UI, Version=2013.1.220.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en:3e3b0da6-8c39-4d10-9111-25eaee1f7355:ed2942d4:580b2269:aac1aeb7:c73cf106:c86a4a06:4c651af2',
		'__EVENTTARGET': '',
		'__EVENTARGUMENT': '',
		'__VIEWSTATE': ViewState,
		'__VIEWSTATEGENERATOR': 'DEAEDF11',
		'__EVENTVALIDATION': EventValidation,
		'ctl00_Header1_rmPortalTabs_i0_i0_ctl00_ClientState': '',
		'ctl00_Header1_rmPortalTabs_i1_i0_ctl00_ClientState': '',
		'ctl00_Header1_rmPortalTabs_i2_i0_ctl03_ClientState': '',
		'ctl00_Header1_rmPortalTabs_i2_i0_ctl07_ClientState': '',
		'ctl00_Header1_rmPortalTabs_i3_i0_ctl00_ClientState': '',
		'ctl00_Header1_rmPortalTabs_i4_i0_ctl00_ClientState': '',
		'ctl00_Header1_rmPortalTabs_i5_i0_ctl00_ClientState': '',
		'ctl00_Header1_rmPortalTabs_i6_i0_ctl00_ClientState': '',
		'ctl00_Header1_rmPortalTabs_i7_i0_ctl00_ClientState': '',
		'ctl00_Header1_rmPortalTabs_i8_i0_ctl00_ClientState': '',
		'ctl00_Header1_rmPortalTabs_i9_i0_ctl00_ClientState': '',
		'ctl00_Header1_rmPortalTabs_ClientState': '',
		'ctl00$ctl82$TimeType': RelInd,
		'ctl00$ctl82$ddLevel1': Conference,
		'ctl00$ctl82$radTeam': Team,
		'ctl00$ctl82$txtTeamName': '',
		'ctl00$ctl82$hidTeamId': '',
		'ctl00$ctl82$Date': DateType,
		'ctl00$ctl82$ddNamedDateRange': Date,
		'ctl00$ctl82$ucStartDate$radTheDate': SD,
		'ctl00$ctl82$ucStartDate$radTheDate$dateInput': StartDate,
		'ctl00_ctl82_ucStartDate_radTheDate_dateInput_ClientState': '{"enabled":true,"emptyMessage":"","validationText":"' + SDValid + '","valueAsString":"'+SDValid+'","minDateStr":"1900-01-01-00-00-00","maxDateStr":"3013-11-05-00-00-00"}',
		'ctl00_ctl82_ucStartDate_radTheDate_calendar_SD': '[]',
		'ctl00_ctl82_ucStartDate_radTheDate_calendar_AD': '[[1900,1,1],[3016,9,21],[2016,9,21]]',
		'ctl00_ctl82_ucStartDate_radTheDate_ClientState': '{"minDateStr":"1900-01-01-00-00-00","maxDateStr":"3013-11-05-00-00-00"}',
		'ctl00$ctl82$ucEndDate$radTheDate': ED,
		'ctl00$ctl82$ucEndDate$radTheDate$dateInput': EndDate,
		'ctl00_ctl82_ucEndDate_radTheDate_dateInput_ClientState': '{"enabled":true,"emptyMessage":"","validationText":"'+EDValid+'","valueAsString":"'+EDValid+'","minDateStr":"1900-01-01-00-00-00","maxDateStr":"3013-11-05-00-00-00"}',
		'ctl00_ctl82_ucEndDate_radTheDate_calendar_SD': '[]',
		'ctl00_ctl82_ucEndDate_radTheDate_calendar_AD': '[[1900,1,1],[3016,9,21],[2016,9,21]]',
		'ctl00_ctl82_ucEndDate_radTheDate_ClientState': '{"minDateStr":"1900-01-01-00-00-00","maxDateStr":"3013-11-05-00-00-00"}',
		'ctl00$ctl82$Event': EventType,
		'ctl00$ctl82$ucDistanceStrokeCourseCtl$ddDistance': Distance,
		'ctl00$ctl82$ucDistanceStrokeCourseCtl$ddStroke': Stroke,
		'ctl00$ctl82$ucDistanceStrokeCourseCtl$ddCourse': '1',
		'ctl00$ctl82$ucDistanceStrokeCourseRelayCtl$ddDistance': RDistance,
		'ctl00$ctl82$ucDistanceStrokeCourseRelayCtl$ddStroke': RStroke,
		'ctl00$ctl82$ucDistanceStrokeCourseRelayCtl$ddCourse': '1',
		'ctl00$ctl82$gender': Gender,
		'ctl00$ctl82$ddStandard': Cut,
		'ctl00$ctl82$radTimesToInclude': BestAll,
		'ctl00$ctl82$txtMaxResults': Number,
		'ctl00$ctl82$cbShowIneligibleTeamTimes': 'on',
		'__ASYNCPOST': 'true',
		'ctl00$ctl82$btnSearch': 'Search'
	}
	headers = {'Host': "www.usaswimming.org",
			   'User-Agent': "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:48.0) Gecko/20100101 Firefox/48.0",
			   'Accept':"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
			   'Accept-Language': "en-US,en;q=0.5",
			   'Accept-Encoding': "gzip, deflate",
			   'X-Requested-With': "XMLHttpRequest",
			   'X-MicrosoftAjax': "Delta=true",
			   'Cache-Control':"no-cache",
			   'Content-Type':"application/x-www-form-urlencoded; charset=utf-8",
			   'Referer':"http://www.usaswimming.org/DesktopDefault.aspx?TabId=1969&Alias=Rainbow&Lang=en",
			   'Content-Length':"21693",
			   'Cookie':"_ga=GA1.2.1586779647.1414692714; Esperantus_Language_Rainbow=en; PortalAlias=Rainbow; ASP.NET_SessionId=20poigxuueusjaqng4fnj1hy; BIGipServerVSSWIMSWEB_http_pool=!Wr67q/sB00Zu8sTn+UsB6o7wiksIvLtMKr3NASY6VS8+bf8PAGt2m2igRt4+QevXGhK7WjsEi7/mxj4=; "
					  "_dc_gtm_UA-1619352-3=1",
			   'Connection':"keep-alive"}

	r = requests.post(URL, data=payload, headers=headers)
	r = r.text

	place = r.find('ctl82_dgSearchResults', 10000)
	if RelInd == 'rbRelay':
		place = r.find('ctl82_dgRelaySearchResults', 9000)
	responseEnd = r.find('</table>', place)
	event = str(Distance) + ' Yard ' + strokeOut
	num = 0

	if RelInd=='rbIndividual':
		while place > 0:
			place = r.find('ctl82_dgSearchResults_lblSwimTimeFormatted', place+1, responseEnd)  # find time
			if place == -1:  # reached end
				break
			time = r[r.find('>', place) + 1: r.find('<', place+4)]
			for tagNum in range(1, 9):
				place = r.find('<td>', place+4)
				start = place + 4
				end = r.find('<', place+4)
				if tagNum == 3:
					swimmer = r[start: end]
				elif tagNum == 5:
					team = r[start: end]
				elif tagNum == 6:
					year = r[start: end]
				elif tagNum == 7:
					meet = r[start: end]
				elif tagNum == 8:
					date = r[start: end]
			if time=='Time' or '&nbsp' in team or toTime(time) < 15:
				continue
			if '*' in time:  # getting some asterisks in times
				time = re.split('\*', time)[0].strip()
			num += 1
			timeString = meet+'\t'+date+'\t'+swimmer+'\t'+year+'\t'+team+'\t'+genderOut+'\t'+event+'\t'+time+'\n'

			if timeString not in oldTimes:
				File.write(timeString)
	elif RelInd=='rbRelay':
		while place>0:
			place = r.find('ctl82_dgRelaySearchResults_lblSwimTimeFormatted', place+1, responseEnd)  # find time
			#print 'loop', place
			if place == -1:  # reached end
				break
			time = r[r.find('>', place) + 1: r.find('<', place+4)]
			for tagNum in range(1, 6):
				place = r.find('<td', place + 3)
				#print place
				start = r.find('>', place + 3) + 1
				end = r.find('<', place + 3)
				#print tagNum, r[start: end]
				if tagNum == 1:
					time = r[start: end]
				elif tagNum == 2:
					team = r[start: end]
					nameEnd = r.find('</td>', place)
					#print r[start: ]
					name = r[start: nameEnd]
					name = name.replace('<br>', ' ')
				elif tagNum == 3:
					meet = r[start: end]
				elif tagNum == 4:
					date = r[start: end]
			if time=='Time' or '&nbsp' in team or toTime(time) < 15:
				continue
			if '*' in time:  # getting some asterisks in times
				time = re.split('\*', time)[0].strip()
			num += 1
			timeString = meet+'\t'+date+'\t'+name+'\t'+''+'\t'+team+'\t'+genderOut+'\t'+event+'\t'+time+'\n'
			if timeString not in oldTimes:
				File.write(timeString)
	return num

def getConfs(confFile='./data/conferences.txt'):
	confDiv = {}
	with open(confFile,'r') as confs:
		for line in confs:
			parts = re.split('\t', line.strip())
			division = parts[0]
			conf = parts[1]
			team = parts[2]
			if not conf in confDiv:
				confDiv[conf] = division
	return confDiv


def topTimesLoop():
	confDiv = getConfs()
	genders = ['m', 'f']
	divisions = ['DIII', 'DII', 'DI']
	distances = {}
	distances['FL'] = [100, 200]
	distances['BK'] = [100, 200]
	distances['BR'] = [100, 200]
	distances['IM'] = [200, 400]
	distances['MED-R'] = [200, 400]
	distances['FR-R'] = [200, 400, 800]
	distances['FR'] = [50, 100, 200, 500, 1000, 1650]
	strokes = ['FR', 'FL', 'BR', 'BK', 'IM', 'FR-R', 'MED-R']
	# conferences = conferenceMap  #[106,102,83,103,115,100] #119=UAA,106=North Central,28=Pac 12,1=Big Ten, 100=MIAC
	conferences = ['']
	years = ['17']  # ['15','14','13','12','11']

	directory = 'data'
	for year in years:
		for division in divisions:
			if division == 'DI':
				divNum = 'D1'
			elif division == 'DII':
				divNum = 'D2'
			else:
				divNum = 'D3'
			for gender in genders:
				filePath = directory + '/' + division + year + gender + 'new'
				oldFilePath = directory + '/' + division + year + gender

				# load old times to prevent dups
				oldTimes = set()
				if os.path.exists(oldFilePath):
					with open(oldFilePath, 'r') as oldMeetFile:
						for line in oldMeetFile:
							oldTimes.add(line)

				# move last load's new times into old file
				if os.path.exists(filePath):
					with open(oldFilePath, 'a') as outfile:
						with open(filePath, 'r') as infile:
							for line in infile:
								if line not in oldTimes:
									outfile.write(line)
									oldTimes.add(line)
					os.remove(filePath)


				with open(filePath, 'w+') as meetFile:
					for conference in conferences:
						if conference == '':
							confName = 'all'
						else:
							confName = conferenceMap[conference]
						if confName in confDiv and confDiv[confName] != divNum:
							continue
						for stroke in distances:
							for distance in distances[stroke]:
								print year, division, gender, distance, stroke

								# now find the times and load them into the new file if they aren't in the old
								print getTopTimes(File=meetFile, Date=year+' '+division, Distance=distance,
											Stroke=stroke, Gender=gender, Conference=conference, BestAll='all',
												  Number=7000, oldTimes=oldTimes)


if __name__ == "__main__":
	topTimesLoop()  # get all new times

#getTopTimes(Date='12 DIII',Distance=100,Stroke='FL',Gender='f',Conference=100)

#Parameters
#1 RelInd Relay or individual (default is individual)
#2 Conference Default is all in the division master list of keys is below
#3 Team defualts to all. Currently no support for specific team selection functionality
#4 Date defaults to 14 D1, wants a string of the format '12 DIII'
#5 Distance string for the race distance you want default is '50'
#6 Stroke which stroke you are pulling. choices are 'FR' 'BK' 'BR' 'FL' 'IM' FR-R' 'MR-R' default is free
#7 Gender male or female default is male
#8 BestAll all available times or just best time for each swimmer. Choices are 'all' or 'best' default is 'best'
#9 Number number of times you want default is '100'
#Master list of conferences
#""--- All --